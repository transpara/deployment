apiVersion: charts.transpara.com/v1
kind: CollectorTelegraf
metadata:
  name: <<NAME>>
spec:
  replicaCount: 1
  image:
    repo: "transpara/collector-telegraf"
    tag: "0.178.0"
    pullPolicy: IfNotPresent
  podAnnotations: {}
  podLabels: 
    app: <<NAME>>
  imagePullSecrets: 
    - name: transpara-docker-secret
  args: []
  env:
    - name: HOSTNAME
      value: "telegraf-polling-service"
  resources: {}
  nodeSelector: {}
  affinity: {}
  tolerations: []
  updateStrategy: {}
  service:
    enabled: false
    type: ClusterIP
    annotations: {}
  rbac:
    create: true
    clusterWide: true
    rules:
      - apiGroups:
          - ""
        resources:
          - nodes
          - nodes/proxy
          - nodes/metrics
          - services
          - endpoints
          - pods
          - ingresses
          - configmaps
        verbs:
          - get
          - list
          - watch
      - apiGroups:
          - "extensions"
        resources:
          - ingresses/status
          - ingresses
        verbs:
          - get
          - list
          - watch
      - nonResourceURLs:
          - "/metrics"
        verbs:
          - get
  serviceAccount:
    create: true
    name: ""
    annotations: {}
  config: <<TELEGRAF_CONFIG>>
  metrics:
    health:
      enabled: false
      service_address: "http://:8888"
      threshold: 5000.0
    internal:
      enabled: true
      collect_memstats: false
  pdb:
    create: false
    minAvailable: 1

apiVersion: charts.transpara.com/v1
kind: CollectorTelegraf
metadata:
  annotations:
    operator-sdk/primary-resource: /test2-collectortelegraf
    operator-sdk/primary-resource-type: ClusterRoleBinding.rbac.authorization.k8s.io
  creationTimestamp: "2024-07-22T17:40:43Z"
  finalizers:
  - helm.sdk.operatorframework.io/uninstall-release
  generation: 1
  name: test2
  namespace: transpara
  resourceVersion: "212089"
  uid: 7259656a-c9d0-4470-8a3b-82664650c6c2
spec:
  affinity: {}
  args: []
  config:
    agent:
      collection_jitter: 0s
      flush_interval: 10s
      flush_jitter: 0s
      hostname: ""
      interval: 10s
      metric_batch_size: "1000"
      metric_buffer_limit: "10000"
      omit_hostname: "false"
      precision: 0s
      round_interval: "true"
    inputs:
    - configuration:
        alias: test2
        collect_cpu_time: "false"
        core_tags: "false"
        percpu: "true"
        report_active: "false"
        totalcpu: "true"
      id: a38b4dbf-5cd3-4a02-84e8-cc0b1bc3e6ca
      name: cpu
      pluginId: inputs.cpu
    outputs:
    - configuration:
        alias: test2
        command: '["python","/app/output_tstore.py"]'
        data_format: json
        environment:
        - TSTORE_API_URL=http://tstore_interface
        - TSTORE_FLUSH_INTERVAL_SECONDS=10
        - TSTORE_FLUSH_SIZE=500
        - OUTPUT_BATCH_SIZE=1000
        - TSYSTEM_SETTINGS_TIMEOUT=10
        - TSYSTEM_HOST=tsystem_api
        - SOURCE_TZ=UTC
        - LOG_ENQUEUING=true
        restart_delay: 60s
      id: e111cebb-8ab3-4513-bead-3dee88fd0c30
      name: test
      pluginId: outputs.execd
    processors: []
  env:
  - name: HOSTNAME
    value: telegraf-polling-service
  image:
    pullPolicy: IfNotPresent
    repo: transpara/collector-telegraf
    tag: 0.178.0
  imagePullSecrets:
  - name: transpara-docker-secret
  metrics:
    health:
      enabled: false
      service_address: http://:8888
      threshold: 5000
    internal:
      collect_memstats: false
      enabled: true
  nodeSelector: {}
  pdb:
    create: false
    minAvailable: 1
  podAnnotations: {}
  podLabels: {}
  rbac:
    clusterWide: true
    create: true
    rules:
    - apiGroups:
      - ""
      resources:
      - nodes
      - nodes/proxy
      - nodes/metrics
      - services
      - endpoints
      - pods
      - ingresses
      - configmaps
      verbs:
      - get
      - list
      - watch
    - apiGroups:
      - extensions
      resources:
      - ingresses/status
      - ingresses
      verbs:
      - get
      - list
      - watch
    - nonResourceURLs:
      - /metrics
      verbs:
      - get
  replicaCount: 1
  resources: {}
  service:
    annotations: {}
    enabled: false
    type: ClusterIP
  serviceAccount:
    annotations: {}
    create: true
    name: ""
  tolerations: []
  updateStrategy: {}